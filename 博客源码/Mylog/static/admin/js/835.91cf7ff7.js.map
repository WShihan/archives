{"version":3,"file":"static/admin/js/835.91cf7ff7.js","mappings":"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","sources":["webpack://my_app_vue/../../../../../packages/components/notification/src/notification.ts","webpack://my_app_vue/../../../../../packages/components/notification/src/notification.vue","webpack://my_app_vue/../../../../../packages/components/notification/src/notify.ts","webpack://my_app_vue/../../../../../packages/components/notification/index.ts","webpack://my_app_vue/../../../../../packages/components/config-provider/src/config-provider.ts","webpack://my_app_vue/../../../../../packages/components/badge/src/badge.ts","webpack://my_app_vue/../../../../../packages/components/badge/src/badge.vue","webpack://my_app_vue/../../../../../packages/components/badge/index.ts","webpack://my_app_vue/../../../../../packages/components/message/src/message.ts","webpack://my_app_vue/../../../../../packages/components/message/src/instance.ts","webpack://my_app_vue/../../../../../packages/components/message/src/message.vue","webpack://my_app_vue/../../../../../packages/components/message/src/method.ts","webpack://my_app_vue/../../../../../packages/components/message/index.ts","webpack://my_app_vue/./src/utils/tip.js"],"sourcesContent":["import { buildProps, definePropType } from '@element-plus/utils'\n\nimport type { ExtractPropTypes, VNode } from 'vue'\nimport type Notification from './notification.vue'\n\nexport const notificationTypes = [\n  'success',\n  'info',\n  'warning',\n  'error',\n] as const\n\nexport const notificationProps = buildProps({\n  customClass: {\n    type: String,\n    default: '',\n  },\n  dangerouslyUseHTMLString: {\n    type: Boolean,\n    default: false,\n  },\n  duration: {\n    type: Number,\n    default: 4500,\n  },\n  icon: {\n    type: definePropType<string | Comment>([String, Object]),\n    default: '',\n  },\n  id: {\n    type: String,\n    default: '',\n  },\n  message: {\n    type: definePropType<string | VNode>([String, Object]),\n    default: '',\n  },\n  offset: {\n    type: Number,\n    default: 0,\n  },\n  onClick: {\n    type: definePropType<() => void>(Function),\n    default: () => undefined,\n  },\n  onClose: {\n    type: definePropType<() => void>(Function),\n    required: true,\n  },\n  position: {\n    type: String,\n    values: ['top-right', 'top-left', 'bottom-right', 'bottom-left'],\n    default: 'top-right',\n  },\n  showClose: {\n    type: Boolean,\n    default: true,\n  },\n  title: {\n    type: String,\n    default: '',\n  },\n  type: {\n    type: String,\n    values: [...notificationTypes, ''],\n    default: '',\n  },\n  zIndex: {\n    type: Number,\n    default: 0,\n  },\n} as const)\nexport type NotificationProps = ExtractPropTypes<typeof notificationProps>\n\nexport const notificationEmits = {\n  destroy: () => true,\n}\nexport type NotificationEmits = typeof notificationEmits\n\nexport type NotificationInstance = InstanceType<typeof Notification>\n\nexport type NotificationOptions = Omit<NotificationProps, 'id'> & {\n  appendTo?: HTMLElement | string\n}\nexport type NotificationOptionsTyped = Omit<NotificationOptions, 'type'>\n\nexport interface NotificationHandle {\n  close: () => void\n}\n\nexport type NotificationParams = Partial<NotificationOptions> | string | VNode\nexport type NotificationParamsTyped =\n  | Partial<NotificationOptionsTyped>\n  | string\n  | VNode\n\nexport type NotifyFn = ((\n  options?: NotificationParams\n) => NotificationHandle) & { closeAll: () => void }\n\nexport type NotifyTypedFn = (\n  options?: NotificationParamsTyped\n) => NotificationHandle\n\nexport interface Notify extends NotifyFn {\n  success: NotifyTypedFn\n  warning: NotifyTypedFn\n  error: NotifyTypedFn\n  info: NotifyTypedFn\n}\n\nexport interface NotificationQueueItem {\n  vm: VNode\n}\n\nexport type NotificationQueue = NotificationQueueItem[]\n","<template>\n  <transition\n    :name=\"ns.b('fade')\"\n    @before-leave=\"onClose\"\n    @after-leave=\"$emit('destroy')\"\n  >\n    <div\n      v-show=\"visible\"\n      :id=\"id\"\n      :class=\"[ns.b(), customClass, horizontalClass]\"\n      :style=\"positionStyle\"\n      role=\"alert\"\n      @mouseenter=\"clearTimer\"\n      @mouseleave=\"startTimer\"\n      @click=\"onClick\"\n    >\n      <el-icon v-if=\"iconComponent\" :class=\"[ns.e('icon'), typeClass]\">\n        <component :is=\"iconComponent\" />\n      </el-icon>\n      <div :class=\"ns.e('group')\">\n        <h2 :class=\"ns.e('title')\" v-text=\"title\" />\n        <div\n          v-show=\"message\"\n          :class=\"ns.e('content')\"\n          :style=\"!!title ? undefined : { margin: 0 }\"\n        >\n          <slot>\n            <p v-if=\"!dangerouslyUseHTMLString\">{{ message }}</p>\n            <!-- Caution here, message could've been compromised, never use user's input as message -->\n            <p v-else v-html=\"message\" />\n          </slot>\n        </div>\n        <el-icon v-if=\"showClose\" :class=\"ns.e('closeBtn')\" @click.stop=\"close\">\n          <Close />\n        </el-icon>\n      </div>\n    </div>\n  </transition>\n</template>\n<script lang=\"ts\" setup>\nimport { computed, onMounted, ref } from 'vue'\nimport { useEventListener, useTimeoutFn } from '@vueuse/core'\nimport { CloseComponents, TypeComponentsMap } from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { useNamespace } from '@element-plus/hooks'\nimport { notificationEmits, notificationProps } from './notification'\n\nimport type { CSSProperties } from 'vue'\n\ndefineOptions({\n  name: 'ElNotification',\n})\n\nconst props = defineProps(notificationProps)\ndefineEmits(notificationEmits)\n\nconst ns = useNamespace('notification')\nconst { Close } = CloseComponents\n\nconst visible = ref(false)\nlet timer: (() => void) | undefined = undefined\n\nconst typeClass = computed(() => {\n  const type = props.type\n  return type && TypeComponentsMap[props.type] ? ns.m(type) : ''\n})\n\nconst iconComponent = computed(() => {\n  if (!props.type) return ''\n  return TypeComponentsMap[props.type] || props.icon\n})\n\nconst horizontalClass = computed(() =>\n  props.position.endsWith('right') ? 'right' : 'left'\n)\n\nconst verticalProperty = computed(() =>\n  props.position.startsWith('top') ? 'top' : 'bottom'\n)\n\nconst positionStyle = computed<CSSProperties>(() => {\n  return {\n    [verticalProperty.value]: `${props.offset}px`,\n    zIndex: props.zIndex,\n  }\n})\n\nfunction startTimer() {\n  if (props.duration > 0) {\n    ;({ stop: timer } = useTimeoutFn(() => {\n      if (visible.value) close()\n    }, props.duration))\n  }\n}\n\nfunction clearTimer() {\n  timer?.()\n}\n\nfunction close() {\n  visible.value = false\n}\n\nfunction onKeydown({ code }: KeyboardEvent) {\n  if (code === EVENT_CODE.delete || code === EVENT_CODE.backspace) {\n    clearTimer() // press delete/backspace clear timer\n  } else if (code === EVENT_CODE.esc) {\n    // press esc to close the notification\n    if (visible.value) {\n      close()\n    }\n  } else {\n    startTimer() // resume timer\n  }\n}\n\n// lifecycle\nonMounted(() => {\n  startTimer()\n  visible.value = true\n})\n\nuseEventListener(document, 'keydown', onKeydown)\n\ndefineExpose({\n  visible,\n  /** @description close notification */\n  close,\n})\n</script>\n","import { createVNode, render } from 'vue'\nimport { isClient } from '@vueuse/core'\nimport { useZIndex } from '@element-plus/hooks'\nimport { debugWarn, isElement, isString, isVNode } from '@element-plus/utils'\nimport NotificationConstructor from './notification.vue'\nimport { notificationTypes } from './notification'\n\nimport type { AppContext, Ref, VNode } from 'vue'\nimport type {\n  NotificationOptions,\n  NotificationProps,\n  NotificationQueue,\n  Notify,\n  NotifyFn,\n} from './notification'\n\n// This should be a queue but considering there were `non-autoclosable` notifications.\nconst notifications: Record<\n  NotificationOptions['position'],\n  NotificationQueue\n> = {\n  'top-left': [],\n  'top-right': [],\n  'bottom-left': [],\n  'bottom-right': [],\n}\n\n// the gap size between each notification\nconst GAP_SIZE = 16\nlet seed = 1\n\nconst notify: NotifyFn & Partial<Notify> & { _context: AppContext | null } =\n  function (options = {}, context: AppContext | null = null) {\n    if (!isClient) return { close: () => undefined }\n\n    if (typeof options === 'string' || isVNode(options)) {\n      options = { message: options }\n    }\n\n    const position = options.position || 'top-right'\n\n    let verticalOffset = options.offset || 0\n    notifications[position].forEach(({ vm }) => {\n      verticalOffset += (vm.el?.offsetHeight || 0) + GAP_SIZE\n    })\n    verticalOffset += GAP_SIZE\n\n    const { nextZIndex } = useZIndex()\n\n    const id = `notification_${seed++}`\n    const userOnClose = options.onClose\n    const props: Partial<NotificationProps> = {\n      ...options,\n      zIndex: nextZIndex(),\n      offset: verticalOffset,\n      id,\n      onClose: () => {\n        close(id, position, userOnClose)\n      },\n    }\n\n    let appendTo: HTMLElement | null = document.body\n    if (isElement(options.appendTo)) {\n      appendTo = options.appendTo\n    } else if (isString(options.appendTo)) {\n      appendTo = document.querySelector(options.appendTo)\n    }\n\n    // should fallback to default value with a warning\n    if (!isElement(appendTo)) {\n      debugWarn(\n        'ElNotification',\n        'the appendTo option is not an HTMLElement. Falling back to document.body.'\n      )\n      appendTo = document.body\n    }\n\n    const container = document.createElement('div')\n\n    const vm = createVNode(\n      NotificationConstructor,\n      props,\n      isVNode(props.message)\n        ? {\n            default: () => props.message,\n          }\n        : null\n    )\n    vm.appContext = context ?? notify._context\n\n    // clean notification element preventing mem leak\n    vm.props!.onDestroy = () => {\n      render(null, container)\n    }\n\n    // instances will remove this item when close function gets called. So we do not need to worry about it.\n    render(vm, container)\n    notifications[position].push({ vm })\n    appendTo.appendChild(container.firstElementChild!)\n\n    return {\n      // instead of calling the onClose function directly, setting this value so that we can have the full lifecycle\n      // for out component, so that all closing steps will not be skipped.\n      close: () => {\n        ;(vm.component!.exposed as { visible: Ref<boolean> }).visible.value =\n          false\n      },\n    }\n  }\nnotificationTypes.forEach((type) => {\n  notify[type] = (options = {}) => {\n    if (typeof options === 'string' || isVNode(options)) {\n      options = {\n        message: options,\n      }\n    }\n    return notify({\n      ...options,\n      type,\n    })\n  }\n})\n\n/**\n * This function gets called when user click `x` button or press `esc` or the time reached its limitation.\n * Emitted by transition@before-leave event so that we can fetch the current notification.offsetHeight, if this was called\n * by @after-leave the DOM element will be removed from the page thus we can no longer fetch the offsetHeight.\n * @param {String} id notification id to be closed\n * @param {Position} position the positioning strategy\n * @param {Function} userOnClose the callback called when close passed by user\n */\nexport function close(\n  id: string,\n  position: NotificationOptions['position'],\n  userOnClose?: (vm: VNode) => void\n): void {\n  // maybe we can store the index when inserting the vm to notification list.\n  const orientedNotifications = notifications[position]\n  const idx = orientedNotifications.findIndex(\n    ({ vm }) => vm.component?.props.id === id\n  )\n  if (idx === -1) return\n  const { vm } = orientedNotifications[idx]\n  if (!vm) return\n  // calling user's on close function before notification gets removed from DOM.\n  userOnClose?.(vm)\n\n  // note that this is called @before-leave, that's why we were able to fetch this property.\n  const removedHeight = vm.el!.offsetHeight\n  const verticalPos = position.split('-')[0]\n  orientedNotifications.splice(idx, 1)\n  const len = orientedNotifications.length\n  if (len < 1) return\n  // starting from the removing item.\n  for (let i = idx; i < len; i++) {\n    // new position equals the current offsetTop minus removed height plus 16px(the gap size between each item)\n    const { el, component } = orientedNotifications[i].vm\n    const pos =\n      Number.parseInt(el!.style[verticalPos], 10) - removedHeight - GAP_SIZE\n    component!.props.offset = pos\n  }\n}\n\nexport function closeAll(): void {\n  // loop through all directions, close them at once.\n  for (const orientedNotifications of Object.values(notifications)) {\n    orientedNotifications.forEach(({ vm }) => {\n      // same as the previous close method, we'd like to make sure lifecycle gets handle properly.\n      ;(vm.component!.exposed as { visible: Ref<boolean> }).visible.value =\n        false\n    })\n  }\n}\n\nnotify.closeAll = closeAll\nnotify._context = null\n\nexport default notify as Notify\n","import { withInstallFunction } from '@element-plus/utils'\n\nimport Notify from './src/notify'\n\nexport const ElNotification = withInstallFunction(Notify, '$notify')\nexport default ElNotification\n\nexport * from './src/notification'\n","import { defineComponent, renderSlot, watch } from 'vue'\nimport { buildProps, definePropType } from '@element-plus/utils'\nimport { provideGlobalConfig, useSizeProp } from '@element-plus/hooks'\n\nimport type { ExtractPropTypes } from 'vue'\nimport type { ExperimentalFeatures } from '@element-plus/tokens'\nimport type { Language } from '@element-plus/locale'\nimport type { ButtonConfigContext } from '@element-plus/components/button'\nimport type { MessageConfigContext } from '@element-plus/components/message'\n\nexport const messageConfig: MessageConfigContext = {}\n\nexport const configProviderProps = buildProps({\n  // Controlling if the users want a11y features.\n  a11y: {\n    type: Boolean,\n    default: true,\n  },\n\n  locale: {\n    type: definePropType<Language>(Object),\n  },\n\n  size: useSizeProp,\n\n  button: {\n    type: definePropType<ButtonConfigContext>(Object),\n  },\n\n  experimentalFeatures: {\n    type: definePropType<ExperimentalFeatures>(Object),\n  },\n\n  // Controls if we should handle keyboard navigation\n  keyboardNavigation: {\n    type: Boolean,\n    default: true,\n  },\n\n  message: {\n    type: definePropType<MessageConfigContext>(Object),\n  },\n\n  zIndex: Number,\n\n  namespace: {\n    type: String,\n    default: 'el',\n  },\n} as const)\nexport type ConfigProviderProps = ExtractPropTypes<typeof configProviderProps>\n\nconst ConfigProvider = defineComponent({\n  name: 'ElConfigProvider',\n  props: configProviderProps,\n\n  setup(props, { slots }) {\n    watch(\n      () => props.message,\n      (val) => {\n        Object.assign(messageConfig, val ?? {})\n      },\n      { immediate: true, deep: true }\n    )\n    const config = provideGlobalConfig(props)\n    return () => renderSlot(slots, 'default', { config: config?.value })\n  },\n})\nexport type ConfigProviderInstance = InstanceType<typeof ConfigProvider>\n\nexport default ConfigProvider\n","import { buildProps } from '@element-plus/utils'\nimport type { ExtractPropTypes } from 'vue'\nimport type Badge from './badge.vue'\n\nexport const badgeProps = buildProps({\n  value: {\n    type: [String, Number],\n    default: '',\n  },\n  max: {\n    type: Number,\n    default: 99,\n  },\n  isDot: Boolean,\n  hidden: Boolean,\n  type: {\n    type: String,\n    values: ['primary', 'success', 'warning', 'info', 'danger'],\n    default: 'danger',\n  },\n} as const)\nexport type BadgeProps = ExtractPropTypes<typeof badgeProps>\n\nexport type BadgeInstance = InstanceType<typeof Badge>\n","<template>\n  <div :class=\"ns.b()\">\n    <slot />\n    <transition :name=\"`${ns.namespace.value}-zoom-in-center`\">\n      <sup\n        v-show=\"!hidden && (content || isDot)\"\n        :class=\"[\n          ns.e('content'),\n          ns.em('content', type),\n          ns.is('fixed', !!$slots.default),\n          ns.is('dot', isDot),\n        ]\"\n        v-text=\"content\"\n      />\n    </transition>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { isNumber } from '@element-plus/utils'\nimport { badgeProps } from './badge'\n\ndefineOptions({\n  name: 'ElBadge',\n})\n\nconst props = defineProps(badgeProps)\n\nconst ns = useNamespace('badge')\n\nconst content = computed<string>(() => {\n  if (props.isDot) return ''\n\n  if (isNumber(props.value) && isNumber(props.max)) {\n    return props.max < props.value ? `${props.max}+` : `${props.value}`\n  }\n  return `${props.value}`\n})\n\ndefineExpose({\n  /** @description badge content */\n  content,\n})\n</script>\n","import { withInstall } from '@element-plus/utils'\n\nimport Badge from './src/badge.vue'\n\nexport const ElBadge = withInstall(Badge)\nexport default ElBadge\n\nexport * from './src/badge'\n","import { isClient } from '@vueuse/core'\nimport {\n  buildProps,\n  definePropType,\n  iconPropType,\n  mutable,\n} from '@element-plus/utils'\nimport type { AppContext, ExtractPropTypes, VNode } from 'vue'\nimport type { Mutable } from '@element-plus/utils'\nimport type MessageConstructor from './message.vue'\n\nexport const messageTypes = ['success', 'info', 'warning', 'error'] as const\n\nexport type messageType = typeof messageTypes[number]\n\nexport interface MessageConfigContext {\n  max?: number\n}\n\nexport const messageDefaults = mutable({\n  customClass: '',\n  center: false,\n  dangerouslyUseHTMLString: false,\n  duration: 3000,\n  icon: '',\n  id: '',\n  message: '',\n  onClose: undefined,\n  showClose: false,\n  type: 'info',\n  offset: 16,\n  zIndex: 0,\n  grouping: false,\n  repeatNum: 1,\n  appendTo: isClient ? document.body : (undefined as never),\n} as const)\n\nexport const messageProps = buildProps({\n  customClass: {\n    type: String,\n    default: messageDefaults.customClass,\n  },\n  center: {\n    type: Boolean,\n    default: messageDefaults.center,\n  },\n  dangerouslyUseHTMLString: {\n    type: Boolean,\n    default: messageDefaults.dangerouslyUseHTMLString,\n  },\n  duration: {\n    type: Number,\n    default: messageDefaults.duration,\n  },\n  icon: {\n    type: iconPropType,\n    default: messageDefaults.icon,\n  },\n  id: {\n    type: String,\n    default: messageDefaults.id,\n  },\n  message: {\n    type: definePropType<string | VNode | (() => VNode)>([\n      String,\n      Object,\n      Function,\n    ]),\n    default: messageDefaults.message,\n  },\n  onClose: {\n    type: definePropType<() => void>(Function),\n    required: false,\n  },\n  showClose: {\n    type: Boolean,\n    default: messageDefaults.showClose,\n  },\n  type: {\n    type: String,\n    values: messageTypes,\n    default: messageDefaults.type,\n  },\n  offset: {\n    type: Number,\n    default: messageDefaults.offset,\n  },\n  zIndex: {\n    type: Number,\n    default: messageDefaults.zIndex,\n  },\n  grouping: {\n    type: Boolean,\n    default: messageDefaults.grouping,\n  },\n  repeatNum: {\n    type: Number,\n    default: messageDefaults.repeatNum,\n  },\n} as const)\nexport type MessageProps = ExtractPropTypes<typeof messageProps>\n\nexport const messageEmits = {\n  destroy: () => true,\n}\nexport type MessageEmits = typeof messageEmits\n\nexport type MessageInstance = InstanceType<typeof MessageConstructor>\n\nexport type MessageOptions = Partial<\n  Mutable<\n    Omit<MessageProps, 'id'> & {\n      appendTo?: HTMLElement | string\n    }\n  >\n>\nexport type MessageParams = MessageOptions | MessageOptions['message']\nexport type MessageParamsNormalized = Omit<MessageProps, 'id'> & {\n  appendTo: HTMLElement\n}\nexport type MessageOptionsWithType = Omit<MessageOptions, 'type'>\nexport type MessageParamsWithType =\n  | MessageOptionsWithType\n  | MessageOptions['message']\n\nexport interface MessageHandler {\n  close: () => void\n}\n\nexport type MessageFn = {\n  (options?: MessageParams, appContext?: null | AppContext): MessageHandler\n  closeAll(type?: messageType): void\n}\nexport type MessageTypedFn = (\n  options?: MessageParamsWithType,\n  appContext?: null | AppContext\n) => MessageHandler\n\nexport interface Message extends MessageFn {\n  success: MessageTypedFn\n  warning: MessageTypedFn\n  info: MessageTypedFn\n  error: MessageTypedFn\n}\n","import { shallowReactive } from 'vue'\nimport type { ComponentInternalInstance, VNode } from 'vue'\nimport type { Mutable } from '@element-plus/utils'\nimport type { MessageHandler, MessageProps } from './message'\n\nexport type MessageContext = {\n  id: string\n  vnode: VNode\n  handler: MessageHandler\n  vm: ComponentInternalInstance\n  props: Mutable<MessageProps>\n}\n\nexport const instances: MessageContext[] = shallowReactive([])\n\nexport const getInstance = (id: string) => {\n  const idx = instances.findIndex((instance) => instance.id === id)\n  const current = instances[idx]\n  let prev: MessageContext | undefined\n  if (idx > 0) {\n    prev = instances[idx - 1]\n  }\n  return { current, prev }\n}\n\nexport const getLastOffset = (id: string): number => {\n  const { prev } = getInstance(id)\n  if (!prev) return 0\n  return prev.vm.exposed!.bottom.value\n}\n","<template>\n  <transition\n    :name=\"ns.b('fade')\"\n    @before-leave=\"onClose\"\n    @after-leave=\"$emit('destroy')\"\n  >\n    <div\n      v-show=\"visible\"\n      :id=\"id\"\n      ref=\"messageRef\"\n      :class=\"[\n        ns.b(),\n        { [ns.m(type)]: type && !icon },\n        ns.is('center', center),\n        ns.is('closable', showClose),\n        customClass,\n      ]\"\n      :style=\"customStyle\"\n      role=\"alert\"\n      @mouseenter=\"clearTimer\"\n      @mouseleave=\"startTimer\"\n    >\n      <el-badge\n        v-if=\"repeatNum > 1\"\n        :value=\"repeatNum\"\n        :type=\"badgeType\"\n        :class=\"ns.e('badge')\"\n      />\n      <el-icon v-if=\"iconComponent\" :class=\"[ns.e('icon'), typeClass]\">\n        <component :is=\"iconComponent\" />\n      </el-icon>\n      <slot>\n        <p v-if=\"!dangerouslyUseHTMLString\" :class=\"ns.e('content')\">\n          {{ message }}\n        </p>\n        <!-- Caution here, message could've been compromised, never use user's input as message -->\n        <p v-else :class=\"ns.e('content')\" v-html=\"message\" />\n      </slot>\n      <el-icon v-if=\"showClose\" :class=\"ns.e('closeBtn')\" @click.stop=\"close\">\n        <Close />\n      </el-icon>\n    </div>\n  </transition>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, onMounted, ref, watch } from 'vue'\nimport { useEventListener, useResizeObserver, useTimeoutFn } from '@vueuse/core'\nimport { TypeComponents, TypeComponentsMap } from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport ElBadge from '@element-plus/components/badge'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { useNamespace } from '@element-plus/hooks'\nimport { messageEmits, messageProps } from './message'\nimport { getLastOffset } from './instance'\nimport type { BadgeProps } from '@element-plus/components/badge'\nimport type { CSSProperties } from 'vue'\n\nconst { Close } = TypeComponents\n\ndefineOptions({\n  name: 'ElMessage',\n})\n\nconst props = defineProps(messageProps)\ndefineEmits(messageEmits)\n\nconst ns = useNamespace('message')\n\nconst messageRef = ref<HTMLDivElement>()\nconst visible = ref(false)\nconst height = ref(0)\n\nlet stopTimer: (() => void) | undefined = undefined\n\nconst badgeType = computed<BadgeProps['type']>(() =>\n  props.type ? (props.type === 'error' ? 'danger' : props.type) : 'info'\n)\nconst typeClass = computed(() => {\n  const type = props.type\n  return { [ns.bm('icon', type)]: type && TypeComponentsMap[type] }\n})\nconst iconComponent = computed(\n  () => props.icon || TypeComponentsMap[props.type] || ''\n)\n\nconst lastOffset = computed(() => getLastOffset(props.id))\nconst offset = computed(() => props.offset + lastOffset.value)\nconst bottom = computed((): number => height.value + offset.value)\nconst customStyle = computed<CSSProperties>(() => ({\n  top: `${offset.value}px`,\n  zIndex: props.zIndex,\n}))\n\nfunction startTimer() {\n  if (props.duration === 0) return\n  ;({ stop: stopTimer } = useTimeoutFn(() => {\n    close()\n  }, props.duration))\n}\n\nfunction clearTimer() {\n  stopTimer?.()\n}\n\nfunction close() {\n  visible.value = false\n}\n\nfunction keydown({ code }: KeyboardEvent) {\n  if (code === EVENT_CODE.esc) {\n    // press esc to close the message\n    close()\n  }\n}\n\nonMounted(() => {\n  startTimer()\n  visible.value = true\n})\n\nwatch(\n  () => props.repeatNum,\n  () => {\n    clearTimer()\n    startTimer()\n  }\n)\n\nuseEventListener(document, 'keydown', keydown)\n\nuseResizeObserver(messageRef, () => {\n  height.value = messageRef.value!.getBoundingClientRect().height\n})\n\ndefineExpose({\n  visible,\n  bottom,\n  close,\n})\n</script>\n","import { createVNode, render } from 'vue'\nimport { isClient } from '@vueuse/core'\nimport {\n  debugWarn,\n  isElement,\n  isFunction,\n  isNumber,\n  isString,\n  isVNode,\n} from '@element-plus/utils'\nimport { useZIndex } from '@element-plus/hooks'\nimport { messageConfig } from '@element-plus/components/config-provider/src/config-provider'\nimport MessageConstructor from './message.vue'\nimport { messageDefaults, messageTypes } from './message'\nimport { instances } from './instance'\n\nimport type { MessageContext } from './instance'\nimport type { AppContext } from 'vue'\nimport type {\n  Message,\n  MessageFn,\n  MessageHandler,\n  MessageOptions,\n  MessageParams,\n  MessageParamsNormalized,\n  messageType,\n} from './message'\n\nlet seed = 1\n\n// TODO: Since Notify.ts is basically the same like this file. So we could do some encapsulation against them to reduce code duplication.\n\nconst normalizeOptions = (params?: MessageParams) => {\n  const options: MessageOptions =\n    !params || isString(params) || isVNode(params) || isFunction(params)\n      ? { message: params }\n      : params\n\n  const normalized = {\n    ...messageDefaults,\n    ...options,\n  }\n\n  if (!normalized.appendTo) {\n    normalized.appendTo = document.body\n  } else if (isString(normalized.appendTo)) {\n    let appendTo = document.querySelector<HTMLElement>(normalized.appendTo)\n\n    // should fallback to default value with a warning\n    if (!isElement(appendTo)) {\n      debugWarn(\n        'ElMessage',\n        'the appendTo option is not an HTMLElement. Falling back to document.body.'\n      )\n      appendTo = document.body\n    }\n\n    normalized.appendTo = appendTo\n  }\n\n  return normalized as MessageParamsNormalized\n}\n\nconst closeMessage = (instance: MessageContext) => {\n  const idx = instances.indexOf(instance)\n  if (idx === -1) return\n\n  instances.splice(idx, 1)\n  const { handler } = instance\n  handler.close()\n}\n\nconst createMessage = (\n  { appendTo, ...options }: MessageParamsNormalized,\n  context?: AppContext | null\n): MessageContext => {\n  const { nextZIndex } = useZIndex()\n\n  const id = `message_${seed++}`\n  const userOnClose = options.onClose\n\n  const container = document.createElement('div')\n\n  const props = {\n    ...options,\n    zIndex: nextZIndex() + options.zIndex,\n    id,\n    onClose: () => {\n      userOnClose?.()\n      closeMessage(instance)\n    },\n\n    // clean message element preventing mem leak\n    onDestroy: () => {\n      // since the element is destroy, then the VNode should be collected by GC as well\n      // we do not want cause any mem leak because we have returned vm as a reference to users\n      // so that we manually set it to false.\n      render(null, container)\n    },\n  }\n  const vnode = createVNode(\n    MessageConstructor,\n    props,\n    isFunction(props.message) || isVNode(props.message)\n      ? { default: props.message }\n      : null\n  )\n  vnode.appContext = context || message._context\n\n  render(vnode, container)\n  // instances will remove this item when close function gets called. So we do not need to worry about it.\n  appendTo.appendChild(container.firstElementChild!)\n\n  const vm = vnode.component!\n\n  const handler: MessageHandler = {\n    // instead of calling the onClose function directly, setting this value so that we can have the full lifecycle\n    // for out component, so that all closing steps will not be skipped.\n    close: () => {\n      vm.exposed!.visible.value = false\n    },\n  }\n\n  const instance: MessageContext = {\n    id,\n    vnode,\n    vm,\n    handler,\n    props: (vnode.component as any).props,\n  }\n\n  return instance\n}\n\nconst message: MessageFn &\n  Partial<Message> & { _context: AppContext | null } = (\n  options = {},\n  context\n) => {\n  if (!isClient) return { close: () => undefined }\n\n  if (isNumber(messageConfig.max) && instances.length >= messageConfig.max) {\n    return { close: () => undefined }\n  }\n\n  const normalized = normalizeOptions(options)\n\n  if (normalized.grouping && instances.length) {\n    const instance = instances.find(\n      ({ vnode: vm }) => vm.props?.message === normalized.message\n    )\n    if (instance) {\n      instance.props.repeatNum += 1\n      instance.props.type = normalized.type\n      return instance.handler\n    }\n  }\n\n  const instance = createMessage(normalized, context)\n\n  instances.push(instance)\n  return instance.handler\n}\n\nmessageTypes.forEach((type) => {\n  message[type] = (options = {}, appContext) => {\n    const normalized = normalizeOptions(options)\n    return message({ ...normalized, type }, appContext)\n  }\n})\n\nexport function closeAll(type?: messageType): void {\n  for (const instance of instances) {\n    if (!type || type === instance.props.type) {\n      instance.handler.close()\n    }\n  }\n}\n\nmessage.closeAll = closeAll\nmessage._context = null\n\nexport default message as Message\n","import { withInstallFunction } from '@element-plus/utils'\n\nimport Message from './src/method'\n\nexport const ElMessage = withInstallFunction(Message, '$message')\nexport default ElMessage\n\nexport * from './src/message'\n","import { ElNotification } from \"element-plus\";\nimport { ElMessage } from \"element-plus\";\n\n/**\n * @description 提示枚举类\n * @export\n * @class PopTip\n */\nexport class PopTip {\n  static success(msg) {\n    ElMessage({\n      message: msg,\n      type: \"success\",\n    });\n  }\n  static info(msg) {\n    ElMessage({\n      message: msg,\n      type: \"info\",\n    });\n  }\n  static warning(msg) {\n    ElMessage({\n      message: msg,\n      type: \"warning\",\n    });\n  }\n  static error(msg) {\n    return ElMessage({\n      message: msg,\n      type: \"error\",\n    });\n  }\n}\n\n/**\n * @description 通知类\n * @export\n * @class Notification\n */\nexport class Notification {\n  static success(msg) {\n    return ElNotification({\n      message: msg,\n      type: \"success\",\n    });\n  }\n  static info(msg) {\n    return ElNotification({\n      message: msg,\n      type: \"info\",\n    });\n  }\n  static warning(msg) {\n    return ElNotification({\n      message: msg,\n      type: \"warning\",\n    });\n  }\n  static error(msg) {\n    return ElNotification({\n      message: msg,\n      type: \"error\",\n    });\n  }\n}\n"],"names":["notificationTypes","notificationProps","buildProps","customClass","type","String","default","dangerouslyUseHTMLString","Boolean","duration","Number","icon","definePropType","Object","id","message","offset","onClick","Function","onClose","required","position","values","showClose","title","zIndex","notificationEmits","destroy","ns","Close","visible","timer","typeClass","iconComponent","horizontalClass","props","verticalProperty","positionStyle","startTimer","stop","clearTimer","close","onKeydown","code","onMounted","useEventListener","document","expose","notifications","GAP_SIZE","seed","notify","options","context","isClient","isVNode","verticalOffset","forEach","vm","vm2","_a","el","offsetHeight","nextZIndex","useZIndex","userOnClose","appendTo","body","isElement","isString","querySelector","debugWarn","container","createElement","createVNode","NotificationConstructor","appContext","_context","onDestroy","render","push","appendChild","firstElementChild","component","exposed","value","orientedNotifications","idx","findIndex","removedHeight","verticalPos","split","splice","len","length","i","pos","parseInt","style","closeAll","ElNotification","withInstallFunction","Notify","messageConfig","configProviderProps","a11y","locale","size","useSizeProp","button","experimentalFeatures","keyboardNavigation","namespace","badgeProps","defineComponent","name","setup","slots","watch","val","assign","immediate","deep","config","provideGlobalConfig","renderSlot","max","isDot","hidden","content","ElBadge","withInstall","Badge","messageTypes","messageDefaults","mutable","center","grouping","repeatNum","messageProps","iconPropType","messageEmits","instances","shallowReactive","getInstance","instance","current","prev","getLastOffset","bottom","messageRef","height","stopTimer","badgeType","lastOffset","customStyle","top","keydown","useResizeObserver","normalizeOptions","params","isFunction","normalized","closeMessage","handler","createMessage","vnode","MessageConstructor","isNumber","instance2","ElMessage","Message","PopTip","msg","Notification"],"sourceRoot":""}